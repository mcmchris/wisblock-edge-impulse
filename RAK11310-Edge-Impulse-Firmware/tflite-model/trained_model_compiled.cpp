/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 15.02.2022 16:36:23

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 320;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[14];
TfLiteEvalTensor tflEvalTensors[14];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[5];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,54 } };
const TfArray<1, float> quant0_scale = { 1, { 0.56355756521224976, } };
const TfArray<1, int> quant0_zero = { 1, { -63 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[25*54] = { 
  -44, -4, -65, 41, 32, 23, 11, -5, 71, -29, 55, -9, 118, -25, 55, 73, 61, -38, 16, -65, -4, 49, 14, 51, -81, 62, -54, 49, -4, -66, -34, 13, 48, 3, 22, 8, 22, -46, 39, 5, 41, -28, -24, 44, 39, -5, 109, -5, 6, 8, 73, -44, -41, 71, 
  -10, 67, -23, 23, 47, 18, 42, -19, 24, -85, -28, -69, -30, -15, 49, -66, -1, -8, -5, 50, -74, -51, 92, 68, 92, -6, -29, 34, 63, -3, 78, -47, -23, 18, -54, -54, -84, 37, 12, 69, 32, 17, 51, 12, -17, -33, 2, -10, 45, -27, 42, 90, -25, -1, 
  -29, 50, -16, -81, -6, 6, -29, -60, -44, -65, -68, -29, -73, -8, -27, -39, 27, -54, 41, -59, 59, 67, -2, 26, -77, 26, -35, -3, 13, -97, -37, -54, 57, -55, 37, 32, -29, 5, -40, 2, 59, 12, -27, 78, 35, -9, 52, 37, 43, 38, 34, 32, -49, 51, 
  -66, 16, -12, 52, 28, -16, -8, 12, -3, 92, 43, -17, -49, 4, -44, -68, -71, -25, 27, 72, 55, -81, 22, 4, 11, 21, 18, 8, 51, 22, -33, 29, 18, -46, 59, -27, -44, 59, 4, 31, 65, -43, -15, -39, -54, -53, 61, -55, -65, 67, 66, -53, 9, -81, 
  8, 5, 82, 35, 72, 3, 55, 62, -2, -28, -72, -11, -17, 31, -23, 16, 13, -54, -21, -35, -54, -33, 11, -80, 26, 27, 57, 28, -32, 22, 18, 54, 35, -20, 53, 44, 37, 54, -64, -28, 52, 84, 48, -5, -9, -35, 18, 7, -60, -14, 0, -35, 6, 83, 
  47, -57, -11, -8, 44, 25, -34, -20, -67, 84, -24, 40, 0, -36, 60, -50, -11, 0, 43, -40, 33, -63, 29, -21, 39, 13, -56, 35, 46, -42, 71, -37, 11, -24, 35, -81, 72, 19, 55, 4, -20, -36, 15, 3, 53, 30, -70, -23, -33, -5, -58, -27, 1, 47, 
  -42, 76, 56, 20, 46, 31, -29, 37, -51, 71, -3, -41, 61, 11, 39, 51, 13, -17, -53, 13, 29, -7, -16, 53, 6, 15, -1, -12, 0, 60, -57, -3, 61, -23, -63, -39, 32, -53, 65, -25, 47, -11, 17, 74, 44, 44, 30, -26, 37, 10, 17, -38, -103, 78, 
  -19, 97, -68, 39, 77, 27, 52, -4, 44, -47, 9, 52, 38, 53, 23, -50, 1, 6, -4, -59, -71, -46, 83, -2, -56, 19, 40, -24, 51, -99, 26, -40, 11, 30, -74, 16, 57, 60, 69, -41, 42, -47, -22, 49, 24, 41, -57, 59, -16, -32, 68, 47, 3, 48, 
  -4, 4, 29, 22, 23, 36, -42, 36, -97, 12, 44, 10, -42, -42, -16, 55, -16, -20, -48, -12, 69, 64, -4, 1, -13, 66, 78, -11, 27, 83, 0, 30, 59, -3, 27, -63, 11, -57, 25, 35, -79, -53, -46, -53, 3, 31, 53, -40, -7, 11, 98, -35, 62, 40, 
  14, -64, 72, 37, 16, 34, -68, 13, -21, 25, -13, -44, -48, -23, -46, 15, 63, 25, 107, 10, -78, -56, 93, -12, -32, 41, 85, -35, 59, 21, -12, -58, -53, -47, 74, -60, -59, 56, 34, 10, -23, -3, -33, 45, -58, -16, -89, 42, -24, 71, 54, 96, 74, 55, 
  -56, 54, 15, 1, -35, -39, -46, -20, 21, -39, 31, 67, -61, 12, 58, 66, -33, -22, -25, -30, 3, 42, -22, -2, 77, -68, 60, -35, 21, -26, 5, -40, -41, -79, 9, -63, 70, -66, -43, -28, 68, 47, 61, -16, -41, 12, -26, 28, -23, -16, -39, 14, 1, -52, 
  48, 50, -43, -44, 58, -24, -73, 35, -19, -72, -69, 51, 22, 37, 36, -37, 30, -76, -61, 5, -57, -24, -54, -34, -79, -31, -26, -35, -63, -22, 41, -44, -43, 113, 44, 17, 35, 22, -26, 33, -5, 72, -45, -77, -51, -55, -20, 5, -20, -37, 75, -46, 41, -12, 
  89, 10, 98, -80, 11, 7, -46, 10, 73, 110, 46, -41, -76, 3, 48, -22, -65, -26, 51, -12, 14, -55, -20, 70, 45, 6, 22, 21, -42, 97, -34, 24, -16, 61, -23, -9, 27, 93, 77, 1, -2, 56, -43, 40, 51, -34, 11, -42, -65, -18, 33, -66, 28, 4, 
  -7, -3, 12, 69, -40, -7, 5, -95, 72, -103, 6, -78, 33, -31, 84, 5, -61, -55, -41, -59, 26, 57, 73, 6, -59, 52, -38, 51, 43, -10, -35, 25, -7, -55, 50, -8, -11, -62, 48, 63, -71, -64, 58, -24, 40, 11, 43, 24, 4, -15, 49, 72, 56, -74, 
  -42, 45, 51, -68, -24, -16, -9, -30, -72, 63, 16, -1, -6, 8, 3, -56, 16, 49, 30, 46, 7, 9, 66, 55, 10, -54, 50, -2, -66, 57, -45, 66, 6, -20, -12, 29, 22, -8, 46, 55, -43, 50, -33, 64, -36, 38, 51, -1, -92, -72, -16, 69, -1, 79, 
  -54, -23, -23, 74, 73, -34, 9, 8, -76, -60, -40, -11, -31, -25, 60, -5, 16, 73, -44, -54, -17, 28, 28, -32, -83, 14, 62, 68, -17, 16, 55, 7, 49, 47, 33, 29, 41, 35, 3, -55, 6, -56, -12, 36, 43, -14, 48, 59, 23, -45, -9, -60, 20, 21, 
  -29, -9, 1, 12, 14, 48, -39, 84, 33, 13, -41, -34, 14, -48, 22, 49, -25, -66, -34, 71, 30, 28, 8, 33, -2, -55, -15, 45, 10, 20, 2, -73, -2, 37, -38, -35, 18, 19, 34, 8, 58, -64, -36, 65, 13, 89, -28, 23, -26, -53, -36, -2, -4, -65, 
  -6, -44, 10, 44, -5, -17, 62, 77, 27, -21, 17, 65, -7, -18, -1, -6, -64, -26, -10, -64, 30, -26, -11, -9, 4, -75, -50, -33, -47, -52, -5, 62, -74, -15, -71, -1, 85, 6, 14, 21, -19, 10, 83, 63, -44, 29, -22, 47, 73, -57, 86, -43, -44, 40, 
  -58, -95, -80, -7, 25, -3, 31, 66, -51, -16, -26, 5, 22, -17, 37, 55, 32, 69, 2, -54, -65, -6, 65, -76, 43, -13, 46, 27, 41, -16, -60, -74, -5, -44, 42, -69, 81, -66, -63, 54, -4, -35, -56, 66, -52, 26, 52, -31, 9, -19, 111, 1, 46, -37, 
  -27, -82, 31, 25, -21, -37, 22, -20, -48, -15, -36, 4, -21, -36, 45, -45, -26, -16, 73, 52, 19, 40, 89, -51, -51, -50, -42, 4, -26, 19, 48, -6, -16, -49, 54, -42, 19, 45, -39, -1, 105, 54, 77, 5, -5, -24, 49, 89, 60, 13, -19, -52, 127, -40, 
  -39, -28, -42, -12, -61, 20, 13, 77, -42, 53, 58, 77, 59, 28, -21, 50, -64, -23, -71, -29, -90, -27, 47, -14, -43, 5, -4, 30, -66, 78, -40, 61, 78, 102, 83, -9, 26, 50, -40, 50, 79, -9, 15, 35, 10, -14, -79, -64, -27, 64, -70, 12, 52, 30, 
  17, -15, -11, 12, 29, -10, 52, 24, -41, -83, -75, -57, -37, 27, 68, -19, -30, 64, 23, 42, -25, -17, 1, 53, 117, -20, 0, 13, -20, 91, 103, 54, 37, -39, -50, 48, 20, 61, 8, 20, 61, 61, 54, -35, -79, 46, -65, -32, -5, 35, 2, 23, 69, -57, 
  -74, -75, -42, 52, -68, -52, 3, 14, -21, -55, 57, 2, -80, -43, -71, 51, -9, -85, 34, 107, 19, 10, 60, 8, 62, -61, 45, -69, 2, 66, -55, -5, -25, 41, 68, 54, 34, 49, -40, -69, -3, -31, -64, 73, 50, 73, 27, -47, -53, 22, -44, 61, -35, -74, 
  -35, 29, 34, 46, -67, -32, 8, -34, -65, -1, -40, -46, -17, -27, 10, -10, -55, -7, -59, -72, -3, 19, 45, -3, 34, -38, 30, 24, 20, -42, 26, 26, -30, -46, -9, 68, 9, 24, -2, 6, -48, 17, -23, 14, 30, 9, -26, 11, -36, -64, -15, 36, -41, 17, 
  70, 42, -6, 44, -26, -1, 18, 73, 17, -11, 0, 85, -14, 90, 8, -4, 3, -2, 68, 71, 64, -73, 5, -42, -1, 45, 67, 53, 58, 106, -16, -12, -44, 41, -93, -16, 94, 20, 56, -41, -58, -47, 48, -11, 63, -24, 23, -38, -17, 80, -19, -4, -19, -25, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 25,54 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0036660386249423027, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[25] = { 46, -13, 11, -12, 53, 2, 52, 21, 50, 45, 5, 75, 38, -4, 51, -31, -25, 54, 83, 66, 30, -25, -53, -30, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 25 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0020660238806158304, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[12*25] = { 
  -73, 45, -49, 44, 56, 11, -38, -57, 43, 41, 71, -85, -23, -25, -59, -31, -7, 14, 17, 9, -26, 54, 18, -53, 58, 
  -20, -4, -40, -57, -70, 48, 76, 78, 55, -30, 21, -51, -29, -6, 75, 45, -49, 69, 44, -66, -14, -55, -70, -4, 24, 
  -27, 2, 16, 31, -45, 27, -1, 33, -47, -28, 29, 62, -4, 35, 8, -44, 9, 79, 30, 15, 48, -41, 3, 52, -41, 
  -65, 53, -50, 54, 16, 61, -39, 54, -28, -35, 22, 69, -10, 9, 62, 10, 34, 34, 6, 70, 12, 9, 50, -47, 23, 
  -2, -24, -4, 53, 5, -18, 24, -23, -41, -13, -91, 22, -16, -76, 65, 63, -40, -90, -75, 1, 94, 53, 9, -57, 58, 
  76, 70, 23, 35, 36, -15, -51, 72, 36, 31, -65, -2, -47, 1, 30, -48, 22, 39, 24, 82, -52, 26, -20, 11, 32, 
  55, 41, 7, 49, 74, 11, -67, -65, -34, -65, -57, 127, 33, -20, -31, 23, 2, -31, 5, 83, -47, -25, -23, 9, -9, 
  -39, 18, 28, -16, -8, -16, -44, -50, 55, 85, -16, -6, -65, 4, -7, -27, 57, 66, 50, 35, -81, -6, 42, 14, -61, 
  -47, 24, -43, -66, -13, 51, -70, 59, 9, 70, 69, -21, -39, 12, -13, -3, 48, -65, 46, 50, 41, 75, -30, 40, 37, 
  -31, -42, -62, -45, 16, 72, -26, -33, -79, 58, -101, -56, 91, -75, 15, -38, 48, 59, -30, -72, -23, -3, 64, -47, 78, 
  14, 22, -45, 45, 1, 9, 59, 86, -31, 64, 36, 19, 14, 35, 61, 9, 57, 79, -53, -17, -66, -29, -69, 64, 13, 
  28, -35, 27, -3, 61, -19, 68, -53, 67, 46, -4, 22, 75, -38, 84, -34, -34, 67, 80, 99, 92, -65, -43, -36, -94, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 12,25 } };
const TfArray<1, float> quant3_scale = { 1, { 0.005542257335036993, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[12] = { -53, 117, 48, -16, -45, 87, -6, -3, 24, -20, 39, 173, };
const TfArray<1, int> tensor_dimension4 = { 1, { 12 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00085167255019769073, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[6*12] = { 
  -38, -54, 46, 34, -72, -12, 56, 97, -58, -81, 4, 118, 
  58, 75, 56, 5, 88, -89, 82, -60, -42, 38, 30, -41, 
  -101, 31, 52, -28, 2, 34, -70, -41, -109, 79, 104, -68, 
  -78, 110, 20, 61, 5, 86, 106, -14, 40, -127, 67, 105, 
  -10, -83, -8, 34, 2, 23, 27, 22, 105, 114, 55, -89, 
  -14, 41, 16, -12, -44, -93, -77, -56, 84, -22, -73, -49, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 6,12 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0062221717089414597, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[6] = { 37, -15, 47, 217, -57, -28, };
const TfArray<1, int> tensor_dimension6 = { 1, { 6 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0010267631150782108, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[4*6] = { 
  56, 91, -108, -47, -64, -92, 
  -71, -86, 47, -44, -86, -90, 
  -57, -81, -127, -56, 46, -87, 
  21, 83, 20, -122, 24, 12, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 4,6 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0084612686187028885, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[4] = { -44, 56, 125, -115, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0023815566673874855, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,25 } };
const TfArray<1, float> quant9_scale = { 1, { 0.15366889536380768, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,12 } };
const TfArray<1, float> quant10_scale = { 1, { 0.16501684486865997, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,6 } };
const TfArray<1, float> quant11_scale = { 1, { 0.28146567940711975, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,4 } };
const TfArray<1, float> quant12_scale = { 1, { 0.31736448407173157, } };
const TfArray<1, int> quant12_zero = { 1, { 85 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,4 } };
const TfArray<1, float> quant13_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 9,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 10,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 11,7,8 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteSoftmaxParams opdata4 = { 1 };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 54, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 1350, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension9, 25, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension10, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension11, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension12, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension13, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 14;
  for(size_t i = 0; i < 14; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 5; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 5; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  13, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 5; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
